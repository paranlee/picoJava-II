/****************************************************************
 ---------------------------------------------------------------
     Copyright 1999 Sun Microsystems, Inc., 901 San Antonio
     Road, Palo Alto, CA 94303, U.S.A.  All Rights Reserved.
     The contents of this file are subject to the current
     version of the Sun Community Source License, picoJava-II
     Core ("the License").  You may not use this file except
     in compliance with the License.  You may obtain a copy
     of the License by searching for "Sun Community Source
     License" on the World Wide Web at http://www.sun.com.
     See the License for the rights, obligations, and
     limitations governing use of the contents of this file.

     Sun, Sun Microsystems, the Sun logo, and all Sun-based
     trademarks and logos, Java, picoJava, and all Java-based
     trademarks and logos are trademarks or registered trademarks 
     of Sun Microsystems, Inc. in the United States and other
     countries.
 ----------------------------------------------------------------
******************************************************************/




 
//
// Trap "ldc2_w" -
//
//	Extract a 8-byte constant value, either type of Long or Double,
//	from the current constant pool and push the constant value onto
//	the operand stack.  The 2 byte operands following the opecode
//	represents the constant pool index, where the constant is stored.
//
//	The operand stack contains the following when this trap is entered:
//	 	|	   ...		|
//		+=======================+
//		|          PSR		|
//		+-----------------------+
//		|	    PC		|
//		+-----------------------+
//		|          VARS		|
//		+-----------------------+
//		|	  FRAME  	|
//		+-----------------------+
//	OPTOP->	|	  ....		|   
//
//	And the stack is utilized as following during the trap execution.
//		|	  ....		|
//		+=======================+
//	 VARS->	|          PSR		|  <-- local var 0
//		+-----------------------+
//		|	    PC		|
//		+-----------------------+
//		|          VARS		|
//		+-----------------------+
//		|	  FRAME  	|
//		+=======================+
//		|  	  index		|  <-- local var 4(INDEX)
//		+=======================+
//		|     type&resol byte	|  <-- local var 5(TYPE_BYTE)
//		+=======================+
//	OPTOP->	|			|
//
//	Finally, the stack and register should be as below just prior to
//	return from this trap.
//
//	 	|	  ....		|
//		+=======================+
//	 	|    constant_value1	|
//		+-----------------------+
//	 	|    constant_value2	|
//		+-----------------------+
//	 VARS->	|	   PSR		|
//		+-----------------------+
//	FRAME-> |         PC+3		|
//		+-----------------------+
//	 	|	   VARS 	|
//		+-----------------------+
//	 	|	  FRAME		|
//		+-----------------------+
//		|	  ....		|   
//
// After trap_return, the OPTOP will be restored to the location where
// the VARS points to(location of PSR).  The other regs, VARS and FRAME
// will be restored with the value from the trap_frame.

public class ldc2_w
{

    public static Method ldc2_w:"()v"
    {
Prologue:

// Set the register VARS to access the PC.
//------0123456789-----
	 read_optop;	// push OPTOP
	  bipush 16;		// PSR is at 4 words below
	 iadd;
	write_vars;	// set the VAR, PC is now local_var 1

// Allocate and initialize local variables for executing this trap routine
//------0123456789-----
	 iconst_0;	// 4(INDEX): the index to the constant pool
	  iconst_0;	// 5(TYPE_BYTE): type&resolution byte of the constant
	   iconst_0;	// 6(value_LSB): Lower 32-bits of the long
	    iconst_0;	// 7(value_MSB): Higher 32-bits of the long

// Extract and save the index operand
//------0123456789-----
	 iload_1;		// load(push) PC(local_var 1)
	  iconst_1;		// push 1
	 iadd;
	 load_ubyte;		// push 'index1'
	  bipush 8;
	 ishl;			// index1<<8

//------0123456789-----
	  iload_1;		// load(push) PC(local_var 1)
	   iconst_2;		// push 2
	  iadd;
	  load_ubyte;		// push 'index2'
	 iadd;			// index1<<8 + index2 ==> local_var 4
	istore 4;

// Now access the CP[0][index] to verify the type info.
//------0123456789-----
	 read_const_pool;	// load the CP reg
	 load_word;		// CP[0], the type_resolution byte array
	  iload 4;		// load the index
	 iadd;			// CP[0][index]
	 load_ubyte;		// load the type&resolution byte, local_var 5
	istore 5;
//------0123456789-----
	 iload 5;
	  bipush 0x7F;
	 iand;		// clear off resol bit if set(Long&Double don't care)
	  dup;
	   iconst_5;		// Long == 5
	 if_icmpeq Long_Constant;
	  bipush 6;		// Double == 6
	if_icmpeq Double_Constant;

// CP[0][index] is not a valid type.  Declare an error and abort execution.
Ldc_Invalid_Type:
//------0123456789-----
         bipush 0xA0;         // "Error:Invalid Constant Type at CP[0][index]"
	 sethi 0x0002;
          sipush 0xFFFC;      // msg box location
	  sethi 0x0;
        ncstore_word;
	goto Ldc_Invalid_Type;
// Simulator should detect this error-msg and HALT execution here

Long_Constant:
Double_Constant:
//------0123456789-----
	 read_const_pool;	// CP reg
	  iload 4;		// CP index for the constant reference
	   iconst_2;
	  ishl;			// word index
	 iadd;
	  dup;
	  load_word;		// word contents in CP[index], MSB
	 istore 7;		// save it
	  iconst_4;
	 iadd;
	 load_word;		// word contents in CP[index+4], LSB
	istore 6;		// save it
 
ReplaceInstruction:
//------0123456789------ 
         sipush 0xCD;  // 0xCD == ldc2_w_quick 
          iload_1;     // load the PC: local_var 1 
        store_byte;    // replace 'getfield' with a quick version

         iload_1;      // load the PC: local_var 1
         load_byte;    // load back the quick opcode which make sure store_byte
                       // update in the memory before I$ fetch it
        pop;           // Pop the value
// End of the modification
  
// The i$ line now must be invalidated, and the D$ needs to be flushed out 
FlushCache: 
//------0123456789----- 
         bipush 8;          // I$ line size, to increment the address 
          iload_1;          // PC 
          cache_flush;      // flush out both I$ and D$ 
          cache_flush;      // flush out 2nd line in I$, possibly 2nd D$ line
        pop2; 
 
Trap_Frame:
//------0123456789-----
         iload_3;       // load saved FRAME
        istore 5;       // put into local var 5
         iload_2;       // load saved VARS
        istore 4;       // put into local var 4
	 iload_1;	// load saved PC
	  iconst_3;	// to return to the next instruction following 'ldc2_w'
	 iadd;
	istore_3;	// put into local var 3
	 iload_0;	// load saved PSR
	istore_2;

	 iload 6;	// LSB
	istore_0;	// put into local_var 0, lower stack word
	 iload 7;	// MSB
	istore_1;	// put into local_var 1, top-of-stack stack after return

Epilogue:
// Finally, set the VARS and FRAME for the 'trap_return'.
// The VARS will point to where the PSR is(the OPTOP starts there) and
// the FRAME will point to the method_entry point location.
//------0123456789-----
	 read_vars;	// read current VARS, pointing to MSB of ret_val
	  dup;
	   bipush 8;
	  isub;
	 write_vars;	// VARS now points to the base of trap_frame
	  bipush 12;
	 isub;
	write_frame;	// FRAME now points to the returnPC

// Now execute trap_return to restore PSR, FRAME, VARS and PC to go back.
	priv_ret_from_trap;
    }
}
